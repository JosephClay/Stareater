{ ColonyFormulas
	colonizationPopThreshold # 10e3;
	uncolonizedMaxPopulation # size / 10 * 1e9;
	maxPopulation # size / 10 * 1e9;
	victoryPointWorth # 1e-6 * pop * 0.98 ^ turn;
	farmFields # 0.1 * 2 ^ (subterrainLvl / 5) * size / 10 * 1e9;
	spaceliftFactor # 1 / limit(
			if(noGrav, 0, 5) - 2 * rocketryLvl / 5,
		1, 20);
	
	populationGrowth 
	{ Stat
		base # pop * 0.04 * (
				(1 + 0.5 * childCareLvl / 5) * 
				if(noGrav, 0.8 ^ (1 - microgravTolLvl / 5), 1) -
				maintenancePenalty
			);
		total # base;
	}
	
	emigrants # pop * 0.001;
	environment # if(noGrav, 0.8 ^ (1 - microgravTolLvl / 5), 1);
	desirability # 1 - pop / maxPop;
	organization # limit(infra_count / pop, 0, 1);
	
	farming
	{ Work
		improvised	# 3 + if(fertile, 4 + 2 * greenHouseLvl / 5, 0);
		organized	# 4 + if(fertile, 4 + 2 * greenHouseLvl / 5, 0) +  2 * gmoFoodLvl / 5;
		orgFactor # 0.5 + 0.5 * farmLawsLvl / 5;
	}
	gardening
	{ Work
		improvised	# 1.5;
		organized	# 1.5 + 1 * (hydroFarmLvl / 5) +  0.5 * (gmoFoodLvl / 5);
		orgFactor # 0.5 + 0.5 * farmLawsLvl / 5;
	}
	mining
	{ Work
		improvised	# 10 + 2 * mineToolsLvl / 5;
		organized	# 20 + 10 * mineToolsLvl / 5 + 5 * recycleLvl / 5;
		orgFactor # 0.5 + 0.5 * mineLawsLvl / 5;
	}
	industry
	{ Work
		improvised	# 2;
		organized	# 5 + 2 * recycleLvl / 5;
		orgFactor # 1;
	}
	development 
	{ Work
		improvised	# 2 + 0.5 * compSciLvl / 5;
		organized	# 5 + 1 * recycleLvl / 5 + 2.5 * compSciLvl / 5;
		orgFactor # 1;
	}
	
	repair # 0.2 * min(infra_count, pop);
	popHp # 1e-5;
}

{ PlanetFormulas
	type: asteriod
	baseTraits [ :noAtmo :noGrav ]
}

{ PlanetFormulas
	type: gasGiant
	baseTraits []
}

{ PlanetFormulas
	type: rock
	baseTraits []
}